Modules.removeAllCached();
Modules.addCached("./cron.js","'use strict';function assert(a,b){if(!a)throw new Error(b||'failed assertion');}function parse(a,b){return a=a.split(' '),b(a),assert(a.length===6,'invalid cron pattern supplied ('+a+')'),a[0]=a[0].replace('*','0-59'),a[1]=a[1].replace('*','0-59'),a[2]=a[2].replace('*','0-23'),a[3]=a[3].replace('*','1-31'),a[4]=a[4].replace('*','1-12'),a[5]=a[5].replace('*','0-6'),b('wow'),b(a),a=a.map(function(a){if(a.indexOf('-')<0)return a;var d=parseInt(a.split('-')[0]);var e=parseInt(a.split('-')[1]);var c=[];for(var b=d;b<=e;b++)c.push(b);return c.join(',');}),b(a),a.map(function(a){return a.split(',').map(function(a){return parseInt(a);}).sort(function(a,b){return a-b;});});}function setup(a,c){if(!jobs[a])return c('exiting setup for '+a);var e=new Date();var b=jobs[a].times;var g=Math.floor(e.getTime());var d=e.getSeconds();var h=e.getMinutes();var f;b[0][0]===0&&d===59?f=1:b[0].filter(function(a){return a>d;}).length>0?f=b[0].filter(function(a){return a>d;})[0]-d:f=60-d+b[0][0],setTimeout(function(){var d=new Date();if(!jobs[a])return c('will not run stopped job '+a);c(['*',d.getMinutes(),d.getHours(),d.getDate(),d.getMonth(),d.getDay()].join(' '));var e=b[1].indexOf(d.getMinutes())>=0&&b[2].indexOf(d.getHours())>=0&&b[3].indexOf(d.getDate())>=0&&b[4].indexOf(d.getMonth()+1)>=0&&b[5].indexOf(d.getDay())>=0;if(!e)return c('not running this minute '+jobs[a].pattern),setup(a,c);c('running '+a),jobs[a].callback(),setup(a,c);},f*1000);}var jobs={};module.exports=function(c,d,a){typeof a==='boolean'&&a?a=console.log.bind(console):a=function a(){},a('Registering cron job for patterning '+c);var b=Math.random().toString(32).slice(2);return a('id is '+b),jobs[b]={pattern:c,times:parse(c,a),callback:d},a('t:'),a(jobs[b].times),setup(b,a),{stop:function a(){delete jobs[b];}};};");

var cron = require('./cron.js')

var log_debug_messages = true

cron('0,10,20,30,40,50 * * * * *', function () {
  console.log('bamf ' + (new Date()).getSeconds())
}, log_debug_messages)
